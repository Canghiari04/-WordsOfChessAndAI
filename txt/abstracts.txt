articles/16DavidNetanyahuWolf.pdf
Abstract. We present an end-to-end learning method for chess, relying on
leep neural networks. Without any a priori knowledge, in particular without
any knowledge regarding the rules of chess, a deep neural network is trained
using a combination of unsupervised pretraining and supervised training. The
unsupervised training extracts high level features from a given position, and
the supervised training learns to compare two chess positions and select the
more favorable one. The training relies entirely on datasets of several million
chess games, and no further domain specific knowledge is incorporated.
The experiments show that the resulting neural network (referred to as
DeepChess) is on a par with state-of-the-art chess playing programs, which
have been developed through many years of manual feature selection and
tuning. DeepChess is the first end-to-end machine learning-based method
that results in a grandmaster-level chess playing performance.

articles/90GeorgeSchaeffer.pdf
Abstract
Human game players rely heavily on the experience gained by playing over
the games of masters. A player may recall a previous game to either obtain
the best move (if he has previously seen the identical position) or suggest a
best move (if similar to others seen). However, game-playing programs
operate in isolation, relying on the combination of search and programmed
knowledge to discover the best move, even in positions well-known to
humans. At best, programs have only a limited amount of information about
previous games. This paper discusses enhancing a chess-playing program to
discover and extract implicit knowledge from previously played grandmaster
games, and using it to improve the chess program’s performance. During a
game, a database of positions is queried looking for identical or similar posi-
tions to those on the board. Similarity measures are determined by chunking
the position and using these patterns as indices into the database. Relevant
information is subsequently passed back to the chess program and used in its
decision making process. As the number of games in the database increases,
the "experience" available to the program improves the likelihood that
relevant, useful information can be found for a given position.

articles/91FeldmannMysliwietzMonien.pdf
ABSTRACT
We show how to implement the af-enhancements like iterative deepening, transposition tables,
history tables etc. used in sequential chess programs in a distributed system such that the
distributed algorithm profits by these heuristics as well as the sequential does. Moreover the
methods we describe are suitable for very large distributed systems. We implemented these
a3-enhancements in the distributed chess program ZUGZWANG. For a distributed system of
64 processors we obtain a speedup between 28 and 34 running at tournament speed. The basis
for this chess program is a distributed af-algorithm with very good load balancing properties
combined with the use of a distributed transposition table that grows with the size of the
distributed system.

articles/83CondonThompson.pdf
Not found

articles/07Beal.pdf
Abstract. The relationship of computer Chess to intelligence is dis-
cussed, and it is observed that, although current Chess programs are ba-
sically unintelligent, programs that learn to play Chess are a new frontier
in the construction of intelligent systems. The definition of intelligent sys-
tems is then expanded to include systems in which individual humans are
components, rather than organizers, of intelligence. From this perspec-
tive, internet communities and universities are observed to be intelligent
systems that are undergoing rapid evolution — a process that Jaap and
his students are actively advancing.

articles/09CiancariniFavini 1.pdf
ABSTRACT
Plagiarism is a growing issue in the field of game-playing
software. As new ideas and technologies are successfully im-
plemented in free and commercial programs, they will be
reused and revisited by later programs until they become

articles/ICGA_J_34_2_HHB_Zugzwangs_in_Chess_Studies.pdf
ABSTRACT
Van der Heijden’s ENDGAME STUDY DATABASE IV, HHDBIV, is the definitive collection of
76,132 chess studies. The zugzwang position or zug, one in which the side to move would
prefer not to, is a frequent theme in the literature of chess studies. In this third data-mining of
HHDBIV, we report on the occurrence of sub-7-man zugs there as discovered by the use of
CQL and Nalimov endgame tables (EGTs). We also mine those Zugzwang Studies in which a
zug more significantly appears in both its White-to-move (wtm) and Black-to-move (btm)
forms. We provide some illustrative and extreme examples of zugzwangs in studies.

articles/76Panek.pdf
Not found

articles/19Kamlish.pdf
Abstract
We present SentiMATE, a novel end-to-end Deep Learning
model for Chess, employing Natural Language Processing
that aims to learn an effective evaluation function assessing
move quality. This function is pre-trained on the sentiment
of commentary associated with the training moves, and is
used to guide and optimize the agent’s game-playing decision
making. The contributions of this research are three-fold: we
build and put forward both a classifier which extracts com-
mentary describing the quality of Chess moves in vast com-
mentary datasets, and a Sentiment Analysis model trained on
Chess commentary to accurately predict the quality of said
moves, to then use those predictions to evaluate the optimal
next move of a Chess agent. Both classifiers achieve over
90% classification accuracy. Lastly, we present a Chess en-
gine, SentiMATE, which evaluates Chess moves based on a
pre-trained sentiment evaluation function. Our results exhibit
strong evidence to support our initial hypothesis - “Can Nat-
ural Language Processing be used to train a novel and sam-
ple efficient evaluation function in Chess Engines?” - as we
integrate our evaluation function into modern Chess engines
and play against agents with traditional Chess move evalua-
tion functions, beating both random agents and a DeepChess
implementation at a level-one search depth - representing the
number of moves a traditional Chess agent (employing the
alpha-beta search algorithm) looks ahead in order to evaluate
a given chess state.

articles/96Brockington.pdf
Not found
